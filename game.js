(function() {
	"use strict";

	const strtBtn = document.getElementById('start'),
		answerDisplay = document.getElementById('word'),
		showGuessed = document.getElementById('myguess');

	strtBtn.addEventListener('click', GameInit);

	function GameInit() {
		console.log('game init');

		// if I have time the Array should be fetch from a json
		const wordArr = new Array('Timothy', 'Jeng', 'Is', 'Really', 'Pissed', 'Because', 'He', 'Is', 'Tired'),
			// fetch string for player to guess
			hangManWord = wordArr[Math.floor(Math.random() * wordArr.length)],
			strArr_hangManWord = hangManWord.toLowerCase().split('');

		let obj_Lit = new Object();
		// create an object literal to map out the index of all the char in a string
		obj_Lit = createDynamicObj(strArr_hangManWord, obj_Lit);

		// setting up the board
		let str_Answer = renderBlankSpace(hangManWord);
		answerDisplay.textContent = str_Answer;
		showGuessed.textContent = ' ';

		// while (win_state) ?
		console.log(`Start of the game check ${obj_Lit}`);
		GameStart(hangManWord.toLowerCase(), str_Answer, obj_Lit, 7, hangManWord.length);
	}

	function GameStart(str_Input, str_Output, obj_Lit, gameState, winState) {
		// define gamestates
		let cur_gameState = gameState,
			cur_winState = winState;

		document.addEventListener('keyup', function(e) {
			// e.key is passing basically every keypress as literal string value
			const playerInput = e.key.toLowerCase(),
				// use object literal to map out the index of chars (duplicates are stored together)
				// indexArr is an array of char index
				indexArr = obj_Lit[playerInput];

			console.log(`Player input :${playerInput}`);
			console.log(`Return index value :${indexArr}`);
			console.log(playerInput);

			// check for alphabet, non-input keys and redundant input
			if (!(playerInput.match(/[a-z]/) !== null && playerInput.length < 2 && indexArr !== null)) {
				return;
			}

			// check for swing and a miss
			if (indexArr === undefined) {
				cur_gameState--;
				return;
			}

			// call function to handle the match, temp_retArr = [processed string, winCount]
			const temp_retArr = processAnswer(playerInput, indexArr, str_Output);

			// clean out matched prop so that it won't match second time
			obj_Lit[playerInput] = null;

			str_Output = temp_retArr[0];
			answerDisplay.textContent = str_Output;

			// update gameState, can be use to adjust difficulty
			cur_winState -= temp_retArr[1];

			console.log('This is inside macthed:');
			console.log(obj_Lit);
			// console.log(`You still got ${cur_gameState} chances left`); 
			// console.log(`Only ${cur_winState} characters to go`);
		})

		if (cur_winState <= 0 || cur_gameState <= 0) {
			// reset gamestate and delet all prop of the object literal
			console.log('game ended');
			endAndReset(obj_Lit, str_Input);
			console.log(obj_Lit);
		}
	}

	// endAndReset(obj_Lit, str_Input);
	// console.log(obj_Lit);


	function renderBlankSpace(strArring) {
		const result = strArring.split('').map(function(elem) {
			return '_';
		});
		return result.join(' ');
	}

	// take string.split() as arg and return am object literal
	function createDynamicObj(str_LowerCase, objLiteral) {
		// match multiple chars in a string and push into an array
		function findAllIndex(char, array) {
			const retArr = new Array;
			array.forEach(function(elem, index) {
				elem === char && retArr.push(index);
			})
			return retArr;
		}
		for (let i = 0, l = str_LowerCase.length; i < l; i++) {
			objLiteral[str_LowerCase[i]] = findAllIndex(str_LowerCase[i], str_LowerCase);
		}
		return objLiteral;
	}

	function processAnswer(str_In, index, str_Render) {
		// find blank space generated by the renderBlankSpace(), remove it than make a temp array
		const tempArr = str_Render.replace(/\s/g, '').split('');
		let count = 0;

		// replacing the item in the index to player input
		// important to note that index should be an array of collected references
		index.forEach(function(elem) {
			// check if we are writing to the first char of the string
			// tempArr[elem] = (str_In || ((elem === 0) && str_In.toUpperCase()));
			tempArr[elem] = (elem === 0) ? str_In.toUpperCase() : str_In;
			count++;
		});

		// a temp to test result
		document.getElementById('myguess').textContent += `${str_In} `;
		return [tempArr.join(' '), count]; // [processed string, count]
	}

	function endAndReset(obj, str_CharRef) {
		// dump object prop
		// obj_Lit is an instance of objLiteral created by createDynamicObj
		// it's likely that this function should delete all props of both object literals
		(function objectDump(obj, str_CharRef) {
			for (let char of str_CharRef) {
				delete obj[char];
			}
			return obj;
		}(obj, str_CharRef));

		// GameInit();
		return obj = null;
	}
}());